<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<c:ExampleAndSourceCodeTabbedSectionContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:j="library://ns.apache.org/royale/jewel" 
	xmlns:html="library://ns.apache.org/royale/html" 
	xmlns:js="library://ns.apache.org/royale/basic" 
	xmlns:c="components.*" 
	xmlns:models="models.*" sourceCodeUrl="ListPlayGround.mxml">
	
	<fx:Script>
		<![CDATA[
			import org.apache.royale.collections.ArrayList;

			import vos.IconListVO;

			private function onChange(event:Event):void {
                selected.text = "Selected: " + list1.selectedItem;
            }

            private var _simple:ArrayList = new ArrayList(["Blueberries", "Bananas", "Lemons", "Oranges", "This is a long item render to try long texts", "This should let you try filtering", "Watermelons", "Apples", "Cherries", "Coconuts", "Figs", "Grapes", "Kiwis", "Mangos"]);

			[Bindable]
			public function get simple():ArrayList
			{
				return _simple
			}

			public function set simple(value:ArrayList):void
			{
				_simple = value;
			}

			public function assignNewData(list:List):void
			{
				list.dataProvider = new ArrayList(["blue", "red", "yellow", "green"]);
			}

			private function clearDataProvider(list:List):void
			{
				list.dataProvider = null;
			}

			private function changeListData(list:List):void
			{
				list.dataProvider = new ArrayList([
					new IconListVO("CheckBox", "check_box"),
					new IconListVO("Label", "label"),
					new IconListVO("RadioButton", "radio_button_checked"),
					new IconListVO("Text", "subject"),
					new IconListVO("TextInput", "text_fields")
				]);
			}

			private function addItem(list:List):void {
				var iconListVO:IconListVO = new IconListVO("New Item", MaterialIconType.CLOSE);

				(list.dataProvider as ArrayList).addItemAt(iconListVO, 4);
				// listModel.iconListData.addItem(iconListVO); // to test things are adding to right place
			}

			public function removeItemAt(list:List):void {
				(list.dataProvider as ArrayList).removeItemAt(0);
				// listModel.iconListData.removeItemAt(0);
			}

			public function updateFirstItem(list:List):void
			{
				var item:IconListVO = (list.dataProvider as ArrayList).getItemAt(0) as IconListVO;
				item.label = "What??";
				item.icon = MaterialIconType.ACCESSIBILITY;
				(list.dataProvider as ArrayList).itemUpdated(item);
				// listModel.iconListData.itemUpdated(item);
			}

			public function removeAllData(list:List):void
			{
				(list.dataProvider as ArrayList).removeAll();
				// listModel.iconListData.removeAll();
			}

			private function describeItem(item:*):String {
				const intro:String = "<strong>List selectedItem:</strong> ";
				var evaluated:String;
				if (item is String) {
					evaluated = "String value: '" + item + "'";
				} else {
					if (item === null || item === undefined) {
						evaluated = "Nothing Selected";
					}
					else {
						if (item is IconListVO) {
							evaluated = "Object's label field: '" + IconListVO(item).label + "'";
						} else {
							evaluated = "Object : " + item;
						}
					}
				}
				return intro + evaluated;
			}

			public function describeIconItem(iconObject:Object):String{
				const iconVO:IconListVO = iconObject as IconListVO;
				if (!iconVO) return 'Nothing Selected';
				return 'label:"' + iconVO.label + '", icon:"' + iconVO.icon + '"';
			}

			// private function traceCollectionLabels():void
			// {
			// 	for each (var iconVO:IconListVO in listModel.iconListData) {				
			// 		trace(iconVO.label);				
			// 	}
			// }
			private function formatLabel(item:Object):String {
				return " - " + item.label;
			}
		]]>
	</fx:Script>

	<c:model>
		<models:ListsModel localId="listModel"/>
	</c:model>

	<c:beads>
		<js:ContainerDataBinding/>
	</c:beads>

	<j:Grid gap="true" itemsVerticalAlign="itemsSameHeight">
		<j:beads>
			<js:Paddings paddingTop="0" paddingLeft="50" paddingRight="50" paddingBottom="50"/>
		</j:beads>

		<c:ExampleHeader title="Jewel List">
			<c:description>
				<![CDATA[<strong>Jewel List</strong> examples.]]>
			</c:description>
		</c:ExampleHeader>

		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<j:CardHeader>
					<html:H3 text="Default" className="primary-normal"/>
				</j:CardHeader>
				<j:CardPrimaryContent>
					
					<j:List localId="list1" width="200" height="300" selectedIndex="2"
							dataProvider="{simple}" change="onChange(event)"/>
					
					<j:TextInput width="200">
						<j:beads>
							<j:TextPrompt prompt="Filter list..."/>
							<j:SearchFilterForList list="{list1}"/>
						</j:beads>
					</j:TextInput>

					<j:Label localId="selected" html="{describeItem(list1.selectedItem)}"/>
					
					<j:HGroup gap="3" itemsVerticalAlign="itemsCenter">
						<j:Label text="Select list by index: "/>
						<j:NumericStepper valueChange="list1.selectedIndex = event.target.value" minimum="0" maximum="{(list1.dataProvider as ArrayList).length - 1}"/>
					</j:HGroup>
					
					<j:HGroup gap="3" itemsVerticalAlign="itemsCenter">
						<j:Label text="Select list by item: "/>
						<j:NumericStepper valueChange="list1.selectedItem = list1.dataProvider.getItemAt(event.target.value)" minimum="0" maximum="{(list1.dataProvider as ArrayList).length - 1}"/>
					</j:HGroup>
					
					<j:HGroup gap="3" itemsVerticalAlign="itemsCenter">
						<j:Label text="Scroll to index: "/>
						<j:NumericStepper valueChange="list1.scrollToIndex(event.target.value)" minimum="0" maximum="{(list1.dataProvider as ArrayList).length - 1}"/>
					</j:HGroup>
				</j:CardPrimaryContent>
				<j:CardActions itemsHorizontalAlign="itemsRight">
					<j:IconButton click="list1.selectedIndex = -1" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Deselect"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.CLEAR}" />
						</j:icon>
					</j:IconButton>
					<j:IconButton click="clearDataProvider(list1)" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Clear Data"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.CLEAR_ALL}" />
						</j:icon>
					</j:IconButton>
					<j:IconButton click="assignNewData(list1)" emphasis="primary" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Load Data"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.VIEW_HEADLINE}" />
						</j:icon>
					</j:IconButton>
				</j:CardActions>
			</j:Card>
		</j:GridCell>

		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<j:CardHeader>
					<html:H3 text="ItemRenderer and rowHeight=52" className="primary-normal"/>
				</j:CardHeader>
				<j:CardPrimaryContent>
					<j:Label text="Notice variableRowHeight should be false to use rowHeight. Click on render's icon will remove that renderer" multiline="true"/>
					
					<j:List localId="list2" width="200" height="300" variableRowHeight="false"
						className="iconListItemRenderer" labelField="label"
						emphasis="secondary" rowHeight="52">
						<j:beads>
							<js:ConstantBinding sourceID="listModel" sourcePropertyName="iconListData" destinationPropertyName="dataProvider"/>
							<j:RemoveAllItemRendererForArrayListData/>
						</j:beads>
					</j:List>
					
					<j:TextInput width="200">
						<j:beads>
							<j:TextPrompt prompt="Filter list..."/>
							<j:SearchFilterForList localId="filter" list="{list2}"/>
						</j:beads>
					</j:TextInput>
					
					<j:Label html="{'Selected Index: ' + list2.selectedIndex}"/>
					<j:Label html="Selected Item description:"/>
					<j:Label html="{describeIconItem(list2.selectedItem)}"/>
					<j:Label html="{'list filtered length: ' + filter.length}"/>
					<!-- <j:Button text="Trace Collection Labels" click="traceCollectionLabels()"/> -->
					
					<!-- example below for dataProvider binding -->
					<!--<j:List labelField="label" dataProvider="{iconList.dataProvider}" selectedIndex="3" width="120" height="200" />-->
				</j:CardPrimaryContent>
				<j:CardActions itemsHorizontalAlign="itemsRight">
					<j:IconButton click="addItem(list2)" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Add Item"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.ADD}" />
						</j:icon>
					</j:IconButton>
					<j:IconButton click="removeItemAt(list2)" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Remove First Item"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.REMOVE}" />
						</j:icon>
					</j:IconButton>
					<j:IconButton click="updateFirstItem(list2)" emphasis="primary" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Update First Item"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.UPDATE}" />
						</j:icon>
					</j:IconButton>
					<j:IconButton click="removeAllData(list2)" emphasis="primary" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Remove All Items"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.DELETE_FOREVER}" />
						</j:icon>
					</j:IconButton>
					<j:IconButton click="changeListData(list2)" emphasis="primary" outlined="true">
						<j:beads>
							<j:ToolTip toolTip="Change Data"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.VIEW_HEADLINE}" />
						</j:icon>
					</j:IconButton>
				</j:CardActions>
			</j:Card>
		</j:GridCell>

		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<j:CardHeader>
					<html:H3 text="Jewel DataContainer with Flow Layout" className="primary-normal"/>
				</j:CardHeader>
				<j:CardPrimaryContent>

					<j:DataContainer>
						<j:beads>
							<j:HorizontalFlowLayout gap="3"/>
							<js:ConstantBinding sourcePropertyName="simple" destinationPropertyName="dataProvider" />
						</j:beads>
					</j:DataContainer>

				</j:CardPrimaryContent>
			</j:Card>
		</j:GridCell>
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<j:CardHeader>
					<html:H3 text="Horizontal Layout" className="primary-normal"/>
				</j:CardHeader>
				<j:CardPrimaryContent>

					<j:List localId="alist" width="100%" height="100">
						<j:beads>
							<j:HorizontalLayout itemsExpand="true" />
						</j:beads>
						<j:dataProvider>
							<js:ArrayList localId="avengersCharacters" source="[Iron Man, Hulk, Thor, Captain America, Hawkeye]" />
						</j:dataProvider>
					</j:List>
				
				</j:CardPrimaryContent>
			</j:Card>
		</j:GridCell>
		
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<j:CardHeader>
					<html:H3 text="Horizontal Scroll and Alternate Row Colors" className="primary-normal"/>
				</j:CardHeader>
				<j:CardPrimaryContent>

					<j:List width="100%" height="300" className="tableStyle" 
							labelField="label" selectedIndex="1"
							dataProvider="{listModel.iconListData}">
						<j:beads>
							<j:HorizontalListScroll/>
							<j:ListAlternateRowColor/>
							<js:LabelFunction labelFunction="formatLabel"/>
						</j:beads>
					</j:List>

				</j:CardPrimaryContent>
			</j:Card>
		</j:GridCell>

		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<j:CardHeader>
					<html:H3 text="Disabled" className="primary-normal"/>
				</j:CardHeader>
				<j:CardPrimaryContent>

					<j:List width="200" height="300" className="iconListItemRenderer" labelField="label" selectedIndex="1">
						<j:beads>
							<js:ConstantBinding sourceID="listModel" sourcePropertyName="iconListData" destinationPropertyName="dataProvider" />
							<j:Disabled/>
						</j:beads>
					</j:List>

				</j:CardPrimaryContent>
			</j:Card>
		</j:GridCell>
	</j:Grid>

</c:ExampleAndSourceCodeTabbedSectionContent>
