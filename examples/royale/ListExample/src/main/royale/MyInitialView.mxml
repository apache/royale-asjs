<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<js:View xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:js="library://ns.apache.org/royale/basic"
				xmlns:gen="simple.*">
	<fx:Style>
		@namespace gen "simple.*";
		@namespace js "library://ns.apache.org/royale/basic";
		
		.GenericList {
			IBeadView: ClassReference("simple.GenericListView");
			IBeadModel: ClassReference("org.apache.royale.html.beads.models.ArraySelectionModel");
			IBeadLayout: ClassReference("org.apache.royale.html.beads.layouts.VerticalLayout");
			IDataProviderItemRendererMapper: ClassReference("simple.IRFactoryForArrayData");
			IItemRendererClassFactory: ClassReference("org.apache.royale.core.ItemRendererClassFactory");
			IItemRenderer: ClassReference("org.apache.royale.html.supportClasses.StringItemRenderer");		
			IBeadController: ClassReference("org.apache.royale.html.beads.controllers.ListSingleSelectionMouseController");			
			
			overflow: auto;
			border: 1px solid #CCCCCC;
		}
		
		js|StringItemRenderer {
			height: 30px;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import models.ProductsModel;
			
			private function addState():void
			{
				(applicationModel as ProductsModel).states.addItemAt("New Jersey", 2);
			}
			
			private function removeState():void
			{
				(applicationModel as ProductsModel).states.removeItemAt(2);
			}
			
			private function addFuzzies():void
			{
				(applicationModel as ProductsModel).productNames.addItemAt("Fuzzies", 2);
			}
		]]>
	</fx:Script>

	<js:Label x="20" y="20" text="A Royale List" />
	
	<js:List id="list" x="20" y="40" width="400" height="300">
		<js:beads>
			<js:ConstantBinding
				sourceID="applicationModel"
				sourcePropertyName="states"
				destinationPropertyName="dataProvider" />
			<!-- Use this dynamic itemRenderer factory when the data is an ArrayList and
			     you want to insert items programmatically. -->
			<js:DynamicItemsRendererFactoryForArrayListData />
			<!-- If you need to dynamically remove items from the ArrayList, include this
			     bead which removes the corresponding itemRenderer. -->
			<js:DynamicRemoveItemRendererForArrayListData />
		</js:beads>
	</js:List>
	
	<js:TextButton text="Add New Jersey" x="20" y="350" click="addState()" />
	<js:TextButton text="Remove Item 0" x="200" y="350" click="removeState()" />

	
	<js:Label x="500" y="20" text="A local list using DataContainer" />
		
	<gen:GenericList x="500" y="40" width="400" height="300" className="GenericList">
		<gen:beads>
			<js:ConstantBinding
				sourceID="applicationModel"
				sourcePropertyName="productNames"
				destinationPropertyName="dataProvider" />
			<!-- you also add this itemRendererFactory if your DataContainer list
			     is using an ArrayList as its dataProvider -->
			<js:DynamicItemsRendererFactoryForArrayListData />
		</gen:beads>
	</gen:GenericList>
	
	<js:TextButton text="Add Fuzzies" x="500" y="350" click="addFuzzies()" />

</js:View>
