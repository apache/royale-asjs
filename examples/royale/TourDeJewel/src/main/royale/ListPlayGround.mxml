<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<c:ExampleAndSourceCodeTabbedSectionContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:j="library://ns.apache.org/royale/jewel" 
	xmlns:html="library://ns.apache.org/royale/html" 
	xmlns:js="library://ns.apache.org/royale/basic" 
	xmlns:c="components.*" 
	xmlns:models="models.*" sourceCodeUrl="ListPlayGround.mxml">
	
	<fx:Script>
		<![CDATA[
			import org.apache.royale.collections.ArrayList;
			import vos.IconListVO;

			private function onChange(event:Event):void {
                selected.text = "Selected: " + list.selectedItem;
            }

            private var _simple:ArrayList = new ArrayList(["Blueberries", "Bananas", "Lemons", "Oranges", "This is a long item render to try long texts", "This should let you try filtering", "Watermelons", "Apples", "Cherries", "Coconuts", "Figs", "Grapes", "Kiwis", "Mangos"]);

			[Bindable]
			public function get simple():ArrayList
			{
				return _simple
			}

			public function set simple(value:ArrayList):void
			{
				_simple = value;
			}

			public function assignNewData():void
			{
				list.dataProvider = new ArrayList(["blue", "red", "yellow", "green"]);
			}

			private function changeListData():void
			{
				iconList.dataProvider = new ArrayList([
					new IconListVO("CheckBox", "check_box"),
					new IconListVO("Label", "label"),
					new IconListVO("RadioButton", "radio_button_checked"),
					new IconListVO("Text", "subject"),
					new IconListVO("TextInput", "text_fields")
				]);
			}

			private function addItem():void
			{
				var iconListVO:IconListVO = new IconListVO("New Item", MaterialIconType.CLOSE);

				(iconList.dataProvider as ArrayList).addItem(iconListVO);
				// listModel.iconListData.addItem(iconListVO); // to test things are adding to right place
			}

			public function removeItemAt():void
			{
				(iconList.dataProvider as ArrayList).removeItemAt(0);
				// listModel.iconListData.removeItemAt(0);
			}

			public function updateFirstItem():void
			{
				var item:IconListVO = (iconList.dataProvider as ArrayList).getItemAt(0) as IconListVO;
				item.label = "What??";
				item.icon = MaterialIconType.ACCESSIBILITY;
				(iconList.dataProvider as ArrayList).itemUpdated(item);
				// listModel.iconListData.itemUpdated(item);
			}

			public function removeAllData():void
			{
				(iconList.dataProvider as ArrayList).removeAll();
				// listModel.iconListData.removeAll();
			}

			private function describeItem(item:*):String {
				const intro:String = "<strong>List selectedItem:</strong> ";
				var evaluated:String;
				if (item is String) {
					evaluated = 'String value: \'' + item + '\'';
				} else {
					if (item === null || item === undefined) {
						evaluated = '[Nothing Selected]'
					}
					else {
						if (item is IconListVO) {
							evaluated = 'Object\'s label field: \'' + IconListVO(item).label + '\'';
						} else {
							evaluated = 'Object : ' + item;
						}
					}
				}
				return intro + evaluated;
			}

			public function describeIconItem(iconObject:Object):String{
				const iconVO:IconListVO = iconObject as IconListVO;
				if (!iconVO) return '[Nothing Selected]';
				return 'label:\'' + iconVO.label + '\', icon:\'' + iconVO.icon + '\'';
			}

			// private function traceCollectionLabels():void
			// {
			// 	for each (var iconVO:IconListVO in listModel.iconListData) {				
			// 		trace(iconVO.label);				
			// 	}
			// }
		]]>
	</fx:Script>

	<j:model>
		<models:ListsModel id="listModel"/>
	</j:model>

	<j:beads>
		<js:ContainerDataBinding/>
	</j:beads>

	<j:Grid gap="true" itemsVerticalAlign="itemsSameHeight">
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<html:H3 text="Jewel List"/>
				<j:List id="list" width="200" height="300" dataProvider="{simple}" change="onChange(event)"/>
				<j:TextInput width="200">
					<j:beads>
						<j:TextPrompt prompt="filter list..."/>
						<j:SearchFilterForList list="{list}"/>
					</j:beads>
				</j:TextInput>
				<j:Label id="selected" html="{describeItem(list.selectedItem)}"/>
				<j:HGroup gap="3" itemsVerticalAlign="itemsCentered">
					<j:Label text="Select list by index: "/>
					<j:NumericStepper valueChange="list.selectedIndex = event.target.value" minimum="0" maximum="11"/>
				</j:HGroup>
				<j:HGroup gap="3" itemsVerticalAlign="itemsCentered">
					<j:Label text="Select list by item: "/>
					<j:NumericStepper valueChange="list.selectedItem = list.dataProvider.getItemAt(event.target.value)" minimum="0" maximum="11"/>
				</j:HGroup>
				<j:Button text="Assign new data" click="assignNewData()"/>
				<j:Button text="Deselect" click="list.selectedIndex = -1"/>
			</j:Card>
		</j:GridCell>

		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<html:H3 text="Jewel List With ItemRenderer"/>
				<j:HGroup gap="3">
					<j:VGroup gap="3">
						<j:List id="iconList" width="200" height="300" className="iconListItemRenderer" labelField="label">
							<j:beads>
								<js:ConstantBinding sourceID="listModel" sourcePropertyName="iconListData" destinationPropertyName="dataProvider" />
								<j:AddListItemRendererForArrayListData/>
								<j:RemoveListItemRendererForArrayListData/>
								<j:UpdateListItemRendererForArrayListData/>
								<j:RemoveAllItemRendererForArrayListData/>
							</j:beads>
						</j:List>
						<j:Label text="Click on render's icon will remove that renderer" multiline="true" width="200"/>
					</j:VGroup>
					<j:VGroup gap="3">
						<j:Button text="change data" emphasis="{Button.PRIMARY}" click="changeListData()"/>
						<j:Button text="Add item" click="addItem()"/>
						<j:Button text="Remove first item" click="removeItemAt()"/>
						<j:Button text="Update first item" click="updateFirstItem()"/>
						<j:Button text="Remove all data" click="removeAllData()"/>
						<j:Label html="{'Selected Index: ' + iconList.selectedIndex}"/>
						<j:Label html="Selected Item description:"/>
						<j:Label html="{describeIconItem(iconList.selectedItem)}"/>
						<j:TextInput>
							<j:beads>
								<j:TextPrompt prompt="filter list..."/>
								<j:SearchFilterForList list="{iconList}"/>
							</j:beads>
						</j:TextInput>
						<!-- <j:Button text="Trace Collection Labels" click="traceCollectionLabels()"/> -->
						
						<!-- example below for dataProvider binding -->
						<!--<j:List labelField="label" dataProvider="{iconList.dataProvider}" selectedIndex="3" width="120" height="200" />-->
					</j:VGroup>
				</j:HGroup>
			</j:Card>
		</j:GridCell>
	</j:Grid>
	<j:Grid gap="true">
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<html:H3 text="Jewel DataContainer (with Flow Layout)"/>
				<j:DataContainer>
					<j:beads>
						<j:HorizontalFlowLayout gap="3"/>
						<js:ConstantBinding sourcePropertyName="simple" destinationPropertyName="dataProvider" />
					</j:beads>
				</j:DataContainer>
			</j:Card>
		</j:GridCell>
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<html:H3 text="Jewel List (Horizontal)"/>
				<j:List id="alist" percentWidth="100" height="100">
					<j:beads>
						<j:HorizontalLayout itemsExpand="true" />
					</j:beads>
					<j:dataProvider>
						<js:ArrayList id="avengersCharacters" source="[Iron Man, Hulk, Thor, Captain America, Hawkeye]" />
					</j:dataProvider>
				</j:List>
			</j:Card>
		</j:GridCell>
	</j:Grid>

	<j:Grid gap="true">
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<html:H3 text="Jewel List Disabled"/>
				<j:List width="200" height="300" className="iconListItemRenderer" labelField="label" selectedIndex="1">
					<j:beads>
						<js:ConstantBinding sourceID="listModel" sourcePropertyName="iconListData" destinationPropertyName="dataProvider" />
						<j:Disabled/>
					</j:beads>
				</j:List>
			</j:Card>
		</j:GridCell>
		
	</j:Grid>

</c:ExampleAndSourceCodeTabbedSectionContent>
