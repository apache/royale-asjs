<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<c:ExampleAndSourceCodeTabbedSectionContent xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:j="library://ns.apache.org/royale/jewel"
	xmlns:html="library://ns.apache.org/royale/html"
	xmlns:js="library://ns.apache.org/royale/basic"
	xmlns:c="components.*"
	xmlns:models="models.*" sourceCodeUrl="AdvancedListPlayGround.mxml">

	<fx:Script>
		<![CDATA[
			import org.apache.royale.collections.ArrayList;
			import org.apache.royale.collections.ArrayListView;
			import org.apache.royale.collections.Sort;
			import org.apache.royale.collections.SortField;
			import org.apache.royale.events.Event;

			import vos.DetailIconListVO;

			public function onChange(event:Event):void{

			}

			private function resetListData():void
			{
				advancedIconList.dataProvider = new ArrayList(listModel.iconDetailListDataSource)

			}

			public function reverseAlphaSort():Sort{
				var sort :Sort = new Sort();
				sort.fields = [new SortField("label", false, true)];
				return sort;
			}

			public function isJewel(item:Object):Boolean {
				return item && item.componentSet == 'Jewel';
			}

			public function isBasic(item:Object):Boolean {
				return item && item.componentSet == 'Basic';
			}

			public function getFilteredALV(fromProvider:Object, id:String, filterFunction:Function = null, sort:Sort = null):ArrayListView{

				var sourceList:ArrayList = fromProvider as ArrayList;
				var alv:ArrayListView = new ArrayListView(sourceList);
				alv.id = id;
				alv.filterFunction = filterFunction;
				alv.sort = sort;
				alv.refresh();
				return alv;
			}

			private function addItem():void
			{
				var dataProvider:ArrayList = advancedIconList.dataProvider as ArrayList;
				var index:uint = dataProvider.length;
				if (advancedIconList.selectedIndex != -1) {
					index = advancedIconList.selectedIndex;
				}
				var source:Array = listModel.iconDetailListDataSource;
				var sourceItem:DetailIconListVO = source[uint(Math.random() * source.length)];
				var item:DetailIconListVO = new DetailIconListVO(sourceItem.label,sourceItem.componentSet, sourceItem.icon);
				dataProvider.addItemAt(item, index);
			}

			public function removeItemAt():void
			{
				var index:uint = 0;
				var dataProvider:ArrayList = advancedIconList.dataProvider as ArrayList;
				var reselect:Boolean;
				if (dataProvider.length) {
					if (advancedIconList.selectedIndex != -1) {
						index = advancedIconList.selectedIndex;
						reselect = true;
					}
					dataProvider.removeItemAt(index);
					if (reselect && dataProvider.length) {
						advancedIconList.selectedIndex = Math.min(index, dataProvider.length - 1);
					}
				}
			}

			public function updateItem():void
			{
				var index:uint = 0;
				var dataProvider:ArrayList = advancedIconList.dataProvider as ArrayList;
				if (advancedIconList.selectedIndex != -1) {
					index = advancedIconList.selectedIndex;
				}
				if (dataProvider.length) {
					var item:DetailIconListVO = (advancedIconList.dataProvider as ArrayList).getItemAt(index) as DetailIconListVO;
					item.label = "What??";
					item.icon = MaterialIconType.ACCESSIBILITY;
					//toggle the componentSet between Basic and Jewel
					if (item.componentSet == 'Jewel') item.componentSet = 'Basic';
					else item.componentSet = 'Jewel';

					dataProvider.itemUpdated(item);
				}
			}

			public function deselect():void{
				advancedIconList.selectedIndex = -1;
			}

			public function removeAllData():void
			{
				(advancedIconList.dataProvider as ArrayList).removeAll();
			}

/*			private function describeItem(item:*):String {
				const intro:String = "<strong>List selectedItem:</strong> ";
				var evaluated:String;
				if (item is String) {
					evaluated = 'String value: \'' + item + '\'';
				} else {
					if (item === null || item === undefined) {
						evaluated = '[Nothing Selected]'
					}
					else {
						if (item is DetailIconListVO) {
							evaluated = 'Object\'s label field: \'' + DetailIconListVO(item).label + '\'';
						} else {
							evaluated = 'Object : ' + item;
						}
					}
				}
				return intro + evaluated;
			}*/

			public function describeIconItem(iconObject:Object):String{
				const iconVO:DetailIconListVO = iconObject as DetailIconListVO;
				if (!iconVO) return '[Nothing Selected]';
				return 'componentSet:\'' + iconVO.componentSet + '\', label:\'' + iconVO.label + '\', icon:\'' + iconVO.icon + '\'';
			}

		]]>
	</fx:Script>

	<j:model>
		<models:ListsModel id="listModel"/>
	</j:model>

	<j:beads>
		<js:ContainerDataBinding/>
	</j:beads>

	<j:Grid gap="true" itemsVerticalAlign="itemsSameHeight">


		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<html:H3 text="Jewel List with ArrayList (source) DataProvider"/>
				<j:HGroup gap="3">
					<j:VGroup gap="3">
						<j:List localId="advancedIconList"
								width="200" height="300"
								className="advancedIconListItemRenderer"
								labelField="label">
							<j:beads>
								<js:ConstantBinding sourceID="listModel" sourcePropertyName="iconDetailListData" destinationPropertyName="dataProvider" />
								<j:AddListItemRendererForArrayListData/>
								<j:RemoveListItemRendererForArrayListData/>
								<j:UpdateListItemRendererForArrayListData/>
								<j:RemoveAllItemRendererForArrayListData/>
							</j:beads>
						</j:List>
						<j:Label text="Click on render's icon will toggle 'component set' for that renderer" multiline="true" width="200"/>
					</j:VGroup>
					<j:VGroup gap="3">
						<j:Button text="Reset data" emphasis="{Button.PRIMARY}" click="resetListData()"/>
						<j:Button text="Add Random item" click="addItem()"/>
						<j:Button text="Remove item" click="removeItemAt()"/>
						<j:Button text="Update item" click="updateItem()"/>
						<j:Button text="Remove all data" click="removeAllData()"/>
						<j:Button text="Deselect" click="deselect()"/>
						<j:Label html="{'Selected Index: ' + advancedIconList.selectedIndex}"/>
						<j:Label html="Selected Item description:"/>
						<j:Label html="{describeIconItem(advancedIconList.selectedItem)}"/>
					</j:VGroup>
				</j:HGroup>
			</j:Card>
		</j:GridCell>

		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">
			<j:Card>
				<j:HGroup gap="3" itemsVerticalAlign="itemsCentered">
					<j:VGroup gap="3">
						<html:H3 text="Jewel filter"/>
						<j:List localId="list1" width="200" height="300"
								className="advancedIconListItemRenderer"
								dataProvider="{getFilteredALV(advancedIconList.dataProvider,'jewelFiltered', isJewel)}"
								change="onChange(event)">
							<j:beads>
								<j:AddListItemRendererForArrayListData/>
								<j:RemoveListItemRendererForArrayListData/>
								<j:UpdateListItemRendererForArrayListData/>
								<j:RemoveAllItemRendererForArrayListData/>
								<j:CollectionChangeUpdateForArrayListData/>
							</j:beads>
						</j:List>
						<j:Label text="item count: {ArrayListView(list1.dataProvider).length}"/>
					</j:VGroup>
					<j:VGroup gap="3">
						<html:H3 text="Basic filter"/>
						<j:List localId="list2" width="200" height="300"
								className="advancedIconListItemRenderer"
								dataProvider="{getFilteredALV(advancedIconList.dataProvider,'basicFiltered', isBasic)}"
								change="onChange(event)">
							<j:beads>
								<j:AddListItemRendererForArrayListData/>
								<j:RemoveListItemRendererForArrayListData/>
								<j:UpdateListItemRendererForArrayListData/>
								<j:RemoveAllItemRendererForArrayListData/>
								<j:CollectionChangeUpdateForArrayListData/>
							</j:beads>
						</j:List>
						<j:Label text="item count: {ArrayListView(list2.dataProvider).length}"/>
					</j:VGroup>
					<j:VGroup gap="3">
						<html:H3 text="Jewel filter &amp; sort"/>
						<j:List localId="list3" width="200" height="300"
								className="advancedIconListItemRenderer"
								dataProvider="{getFilteredALV(advancedIconList.dataProvider,'jewelFilteredSorted', isJewel, reverseAlphaSort())}"
								change="onChange(event)">
							<j:beads>
								<j:AddListItemRendererForArrayListData/>
								<j:RemoveListItemRendererForArrayListData/>
								<j:UpdateListItemRendererForArrayListData/>
								<j:RemoveAllItemRendererForArrayListData/>
								<j:CollectionChangeUpdateForArrayListData/>
							</j:beads>
						</j:List>
						<j:Label text="item count: {ArrayListView(list3.dataProvider).length}"/>
					</j:VGroup>
				</j:HGroup>



			</j:Card>
		</j:GridCell>
	</j:Grid>


</c:ExampleAndSourceCodeTabbedSectionContent>
